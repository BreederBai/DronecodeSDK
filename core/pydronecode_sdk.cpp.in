#include "dronecode_sdk.h"
${includes}
#include "plugins/telemetry/include/plugins/telemetry/telemetry.h"

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace dronecode_sdk {

namespace py = pybind11;

PYBIND11_MODULE(pydronecode_sdk, m)
{
    m.doc() = "pybind11 Dronecode SDK plugin";

    py::class_<DronecodeSDK>(m, "DronecodeSDK")
        .def(py::init<>())
        .def("add_udp_connection",
             (ConnectionResult(DronecodeSDK::*)(const std::string &, int)) &
                 DronecodeSDK::add_udp_connection,
             "Connect to UDP and specify URI and port")
        .def("add_udp_connection",
             (ConnectionResult(DronecodeSDK::*)(int)) & DronecodeSDK::add_udp_connection,
             "Connect to UDP and specify port")
        .def("system_uuids", &DronecodeSDK::system_uuids)
        .def("system",
             (System & (DronecodeSDK::*)() const) & DronecodeSDK::system,
             py::return_value_policy::reference)
        .def("system",
             (System & (DronecodeSDK::*)(uint64_t) const) & DronecodeSDK::system,
             py::return_value_policy::reference);

    py::enum_<ConnectionResult>(m, "ConnectionResult")
        .value("SUCCESS", ConnectionResult::SUCCESS)
        .value("TIMEOUT", ConnectionResult::TIMEOUT)
        .value("SOCKET_ERROR", ConnectionResult::SOCKET_ERROR)
        .value("BIND_ERROR", ConnectionResult::BIND_ERROR)
        .value("SOCKET_CONNECTION_ERROR", ConnectionResult::SOCKET_CONNECTION_ERROR)
        .value("CONNECTION_ERROR", ConnectionResult::CONNECTION_ERROR)
        .value("NOT_IMPLEMENTED", ConnectionResult::NOT_IMPLEMENTED)
        .value("SYSTEM_NOT_CONNECTED", ConnectionResult::SYSTEM_NOT_CONNECTED)
        .value("SYSTEM_BUSY", ConnectionResult::SYSTEM_BUSY)
        .value("COMMAND_DENIED", ConnectionResult::COMMAND_DENIED)
        .value("DESTINATION_IP_UNKNOWN", ConnectionResult::DESTINATION_IP_UNKNOWN)
        .value("CONNECTIONS_EXHAUSTED", ConnectionResult::CONNECTIONS_EXHAUSTED)
        .value("CONNECTION_URL_INVALID", ConnectionResult::CONNECTION_URL_INVALID)
        .export_values();

    py::class_<System>(m, "System");

    py::class_<PluginBase> plugin_base(m, "PluginBase");

${plugins}
}

} // namespace dronecode_sdk
